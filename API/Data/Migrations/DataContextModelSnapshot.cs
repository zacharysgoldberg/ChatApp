// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
	[DbContext(typeof(DataContext))]
	partial class DataContextModelSnapshot : ModelSnapshot
	{
		protected override void BuildModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

			modelBuilder.Entity("API.Entities.AppUser", b =>
					{
						b.Property<int>("Id")
											.ValueGeneratedOnAdd()
											.HasColumnType("INTEGER");

						b.Property<int>("AccessFailedCount")
											.HasColumnType("INTEGER");

						b.Property<string>("ConcurrencyStamp")
											.IsConcurrencyToken()
											.HasColumnType("TEXT");

						b.Property<DateTime>("Created")
											.HasColumnType("TEXT");

						b.Property<string>("Email")
											.HasMaxLength(256)
											.HasColumnType("TEXT");

						b.Property<bool>("EmailConfirmed")
											.HasColumnType("INTEGER");

						b.Property<DateTime>("LastActive")
											.HasColumnType("TEXT");

						b.Property<bool>("LockoutEnabled")
											.HasColumnType("INTEGER");

						b.Property<DateTimeOffset?>("LockoutEnd")
											.HasColumnType("TEXT");

						b.Property<string>("NormalizedEmail")
											.HasMaxLength(256)
											.HasColumnType("TEXT");

						b.Property<string>("NormalizedUserName")
											.HasMaxLength(256)
											.HasColumnType("TEXT");

						b.Property<string>("PasswordHash")
											.HasColumnType("TEXT");

						b.Property<string>("PhoneNumber")
											.HasColumnType("TEXT");

						b.Property<bool>("PhoneNumberConfirmed")
											.HasColumnType("INTEGER");

						b.Property<int?>("PhotoId")
											.HasColumnType("INTEGER");

						b.Property<string>("RefreshToken")
											.HasColumnType("TEXT");

						b.Property<DateTime>("RefreshTokenExpiryTime")
											.HasColumnType("TEXT");

						b.Property<string>("SecurityStamp")
											.HasColumnType("TEXT");

						b.Property<bool>("TwoFactorEnabled")
											.HasColumnType("INTEGER");

						b.Property<string>("UserName")
											.HasMaxLength(256)
											.HasColumnType("TEXT");

						b.HasKey("Id");

						b.HasIndex("NormalizedEmail")
											.HasDatabaseName("EmailIndex");

						b.HasIndex("NormalizedUserName")
											.IsUnique()
											.HasDatabaseName("UserNameIndex");

						b.HasIndex("PhotoId");

						b.ToTable("AspNetUsers", (string)null);
					});

			modelBuilder.Entity("API.Entities.Contact", b =>
					{
						b.Property<int>("Id")
											.ValueGeneratedOnAdd()
											.HasColumnType("INTEGER");

						b.Property<int>("UserId")
											.HasColumnType("INTEGER");

						b.HasKey("Id");

						b.HasIndex("UserId");

						b.ToTable("Contacts");
					});

			modelBuilder.Entity("API.Entities.GroupMessage", b =>
					{
						b.Property<int>("Id")
											.ValueGeneratedOnAdd()
											.HasColumnType("INTEGER");

						b.Property<Guid>("ChannelId")
											.HasColumnType("TEXT");

						b.Property<string>("ChannelName")
											.HasColumnType("TEXT");

						b.Property<string>("Content")
											.HasColumnType("TEXT");

						b.Property<DateTime?>("CreatedAt")
											.HasColumnType("TEXT");

						b.Property<int>("SenderId")
											.HasColumnType("INTEGER");

						b.HasKey("Id");

						b.HasIndex("SenderId");

						b.ToTable("GroupMessages");
					});

			modelBuilder.Entity("API.Entities.Message", b =>
					{
						b.Property<int>("Id")
											.ValueGeneratedOnAdd()
											.HasColumnType("INTEGER");

						b.Property<string>("Content")
											.HasColumnType("TEXT");

						b.Property<DateTime?>("CreatedAt")
											.HasColumnType("TEXT");

						b.Property<int>("RecipientId")
											.HasColumnType("INTEGER");

						b.Property<int>("SenderId")
											.HasColumnType("INTEGER");

						b.HasKey("Id");

						b.HasIndex("RecipientId");

						b.HasIndex("SenderId");

						b.ToTable("Messages");
					});

			modelBuilder.Entity("API.Entities.Photo", b =>
					{
						b.Property<int>("Id")
											.ValueGeneratedOnAdd()
											.HasColumnType("INTEGER");

						b.Property<string>("PublicId")
											.HasColumnType("TEXT");

						b.Property<string>("Url")
											.HasColumnType("TEXT");

						b.HasKey("Id");

						b.ToTable("Photo");
					});

			modelBuilder.Entity("AppUserGroupMessage", b =>
					{
						b.Property<int>("GroupMessagesId")
											.HasColumnType("INTEGER");

						b.Property<int>("UsersId")
											.HasColumnType("INTEGER");

						b.HasKey("GroupMessagesId", "UsersId");

						b.HasIndex("UsersId");

						b.ToTable("AppUserGroupMessage");
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
					{
						b.Property<int>("Id")
											.ValueGeneratedOnAdd()
											.HasColumnType("INTEGER");

						b.Property<string>("ConcurrencyStamp")
											.IsConcurrencyToken()
											.HasColumnType("TEXT");

						b.Property<string>("Name")
											.HasMaxLength(256)
											.HasColumnType("TEXT");

						b.Property<string>("NormalizedName")
											.HasMaxLength(256)
											.HasColumnType("TEXT");

						b.HasKey("Id");

						b.HasIndex("NormalizedName")
											.IsUnique()
											.HasDatabaseName("RoleNameIndex");

						b.ToTable("AspNetRoles", (string)null);
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
					{
						b.Property<int>("Id")
											.ValueGeneratedOnAdd()
											.HasColumnType("INTEGER");

						b.Property<string>("ClaimType")
											.HasColumnType("TEXT");

						b.Property<string>("ClaimValue")
											.HasColumnType("TEXT");

						b.Property<int>("RoleId")
											.HasColumnType("INTEGER");

						b.HasKey("Id");

						b.HasIndex("RoleId");

						b.ToTable("AspNetRoleClaims", (string)null);
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
					{
						b.Property<int>("Id")
											.ValueGeneratedOnAdd()
											.HasColumnType("INTEGER");

						b.Property<string>("ClaimType")
											.HasColumnType("TEXT");

						b.Property<string>("ClaimValue")
											.HasColumnType("TEXT");

						b.Property<int>("UserId")
											.HasColumnType("INTEGER");

						b.HasKey("Id");

						b.HasIndex("UserId");

						b.ToTable("AspNetUserClaims", (string)null);
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
					{
						b.Property<string>("LoginProvider")
											.HasColumnType("TEXT");

						b.Property<string>("ProviderKey")
											.HasColumnType("TEXT");

						b.Property<string>("ProviderDisplayName")
											.HasColumnType("TEXT");

						b.Property<int>("UserId")
											.HasColumnType("INTEGER");

						b.HasKey("LoginProvider", "ProviderKey");

						b.HasIndex("UserId");

						b.ToTable("AspNetUserLogins", (string)null);
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
					{
						b.Property<int>("UserId")
											.HasColumnType("INTEGER");

						b.Property<int>("RoleId")
											.HasColumnType("INTEGER");

						b.HasKey("UserId", "RoleId");

						b.HasIndex("RoleId");

						b.ToTable("AspNetUserRoles", (string)null);
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
					{
						b.Property<int>("UserId")
											.HasColumnType("INTEGER");

						b.Property<string>("LoginProvider")
											.HasColumnType("TEXT");

						b.Property<string>("Name")
											.HasColumnType("TEXT");

						b.Property<string>("Value")
											.HasColumnType("TEXT");

						b.HasKey("UserId", "LoginProvider", "Name");

						b.ToTable("AspNetUserTokens", (string)null);
					});

			modelBuilder.Entity("API.Entities.AppUser", b =>
					{
						b.HasOne("API.Entities.Photo", "Photo")
											.WithMany()
											.HasForeignKey("PhotoId");

						b.Navigation("Photo");
					});

			modelBuilder.Entity("API.Entities.Contact", b =>
					{
						b.HasOne("API.Entities.AppUser", "AppUser")
											.WithMany("Contacts")
											.HasForeignKey("UserId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();

						b.Navigation("AppUser");
					});

			modelBuilder.Entity("API.Entities.GroupMessage", b =>
					{
						b.HasOne("API.Entities.AppUser", "Sender")
											.WithMany()
											.HasForeignKey("SenderId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();

						b.Navigation("Sender");
					});

			modelBuilder.Entity("API.Entities.Message", b =>
					{
						b.HasOne("API.Entities.AppUser", "Recipient")
											.WithMany("MessagesReceived")
											.HasForeignKey("RecipientId")
											.OnDelete(DeleteBehavior.Restrict)
											.IsRequired();

						b.HasOne("API.Entities.AppUser", "Sender")
											.WithMany("MessagesSent")
											.HasForeignKey("SenderId")
											.OnDelete(DeleteBehavior.Restrict)
											.IsRequired();

						b.Navigation("Recipient");

						b.Navigation("Sender");
					});

			modelBuilder.Entity("AppUserGroupMessage", b =>
					{
						b.HasOne("API.Entities.GroupMessage", null)
											.WithMany()
											.HasForeignKey("GroupMessagesId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();

						b.HasOne("API.Entities.AppUser", null)
											.WithMany()
											.HasForeignKey("UsersId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
					{
						b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
											.WithMany()
											.HasForeignKey("RoleId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
					{
						b.HasOne("API.Entities.AppUser", null)
											.WithMany()
											.HasForeignKey("UserId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
					{
						b.HasOne("API.Entities.AppUser", null)
											.WithMany()
											.HasForeignKey("UserId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
					{
						b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
											.WithMany()
											.HasForeignKey("RoleId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();

						b.HasOne("API.Entities.AppUser", null)
											.WithMany()
											.HasForeignKey("UserId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
					{
						b.HasOne("API.Entities.AppUser", null)
											.WithMany()
											.HasForeignKey("UserId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();
					});

			modelBuilder.Entity("API.Entities.AppUser", b =>
					{
						b.Navigation("Contacts");

						b.Navigation("MessagesReceived");

						b.Navigation("MessagesSent");
					});
#pragma warning restore 612, 618
		}
	}
}
